<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <link rel="icon" href="./files/logo.png">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Paytone+One&family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/boxicons@latest/css/boxicons.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
    /* General styles */
    * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
        font-family: 'Poppins', sans-serif;
        text-decoration: none;
        list-style: none;
        scroll-behavior: smooth;
    }

    body {
        background: rgba(0, 20, 40, 0.95);
        color: white;
        font-family: 'Arial', sans-serif;
        min-height: 100vh;
        margin: 0;
        display: flex;
        flex-direction: column;
        position: relative;
    }

    /* Navbar styles */
    .navbar {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        background: rgba(0, 20, 40, 0.95);
        color: white;
        padding: 0.5rem 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        display: flex;
        justify-content: space-between;
        align-items: center;
        z-index: 1000;
        height: 70px;
    }

    /* ... (keep all your existing styles until the alerts section) ... */
    .navbar-logo {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .logo {
        width: 50px;
        height: 50px;
    }

    .website-name {
        font-size: 2rem;
        font-weight: bold;
        letter-spacing: 0.5px;
        margin-top: 7px;
    }

    .highlight-food {
        color: #007bff;
    }

    .navbar-links {
        display: flex;
        gap: 1.5rem;
    }

    .nav-link {
        color: #fff;
        font-size: 1.2rem;
        font-weight: 600;
        padding: 5px 10px;
        transition: all 0.3s ease;
    }

    .nav-link:hover {
        color: #0a0a0a;
        background: #007bff;
        border-radius: 5px;
        box-shadow: 0 0 15px rgba(0, 123, 255, 0.4);
    }

    /* User Details Section Styles */
    .user-details-section {
        background: rgba(17, 24, 39, 0.95);
        padding: 1.5rem 2rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        margin-top: 70px;
        width: 100%;
        box-sizing: border-box;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .user-details-section .container {
        max-width: 1400px;
        margin: 0 auto;
    }

    .user-details-section .flex {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1.5rem;
    }

    /* Modified - Removed default gap */
    .user-details-section .flex .items-center {
        display: flex;
        align-items: center;
        gap: 0; /* Remove default gap */
    }

    .user-details-section .bg-blue-500 {
        background: #3B82F6;
        padding: 0.75rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }

    /* Added margin to the text container */
    .user-details-section .flex .items-center > div:last-child {
        margin-left: 0.5rem; /* Add small margin between icon and text */
    }

    /* Modified for larger screens */
    @media screen and (min-width: 769px) {
        .bg-gray-900 .flex {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .bg-gray-900 #searchInput {
            width: 200px;
        }

        /* Maintain slightly larger gap on bigger screens */
        .user-details-section .flex .items-center > div:last-child {
            margin-left: 1rem;
        }
    }

    /* Modified for smaller screens */
    @media screen and (max-width: 768px) {
        .user-details-section .flex .items-center > div:last-child {
            margin-left: 0.25rem; /* Minimal gap on mobile */
        }

        .user-details-section .bg-blue-500 {
            padding: 0.4rem;
        }
    }

    /* Rest of the styles remain the same... */

    .user-details-section .bg-blue-500 {
        background: #3B82F6;
        padding: 0.75rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }

    .user-details-section .text-xl {
        font-size: 1.25rem;
        font-weight: 600;
        color: #fff;
        margin-bottom: 0.25rem;
    }

    .user-details-section .text-sm {
        font-size: 0.875rem;
        color: #9CA3AF;
    }

    /* Main Content Container */
    .main-content {
        flex: 1;
        padding: 2rem;
        margin-top: 2rem;
        width: 100%;
        box-sizing: border-box;
        max-width: 1400px;
        margin-left: auto;
        margin-right: auto;
    }

    /* Alert Styles */
    .alert {
        background-color: #FDE047;
        color: #1E293B;
        border-left: 6px solid #FACC15;
        margin: 1rem 0;
        width: 100%;
        box-sizing: border-box;
        padding: 1rem;
        border-radius: 0.5rem;
    }

    /* Profile Dropdown Styles */
    .profile-dropdown {
        position: relative;
        z-index: 50;
    }

    .profile-dropdown .dropdown-toggle {
        background: rgba(255, 255, 255, 0.1);
        padding: 0.5rem;
        border-radius: 0.375rem;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .profile-dropdown .dropdown-toggle:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .profile-dropdown .dropdown-menu {
        position: absolute;
        right: 0;
        top: 100%;
        background: #1F2937;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        min-width: 150px;
        margin-top: 0.5rem;
    }

    .profile-dropdown .dropdown-item {
        display: block;
        width: 100%;
        padding: 0.75rem 1rem;
        color: white;
        text-align: left;
        transition: background-color 0.2s;
    }

    .profile-dropdown .dropdown-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    /* Button Styles */
    .btn-primary {
        background-color: #3B82F6;
        color: #FFFFFF;
        font-weight: bold;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .btn-primary:hover {
        background-color: #2563EB;
        transform: scale(1.05);
    }

    /* Table Styles */
    table {
        width: 100%;
        border-collapse: collapse;
    }

    table th {
        background-color: #1E293B;
        color: #60A5FA;
        text-transform: uppercase;
        padding: 1rem;
        text-align: left;
    }

    table tr:nth-child(even) {
        background-color: #2A2A2A;
    }

    table tr:nth-child(odd) {
        background-color: #1F1F1F;
    }

    table td {
        color: #E5E7EB;
        padding: 1rem;
    }

    /* Form Input Styles */
    input[type="text"], 
    input[type="number"], 
    input[type="date"] {
        width: 100%;
        padding: 0.75rem 1rem;
        color: #000000;
        background-color: #F3F4F6;
        border: 1px solid #D1D5DB;
        border-radius: 0.5rem;
        transition: border-color 0.2s ease;
    }

    input[type="text"]:focus, 
    input[type="number"]:focus, 
    input[type="date"]:focus {
        outline: none;
        border-color: #3B82F6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
    }

    input[type="text"]::placeholder, 
    input[type="number"]::placeholder, 
    input[type="date"]::placeholder {
        color: #6B7280;
    }

    /* Footer Styles */
    .footer {
        background-color: #001529;
        padding-bottom: 13px;
        margin-top: auto;
        width: 100%;
    }

    .footer-content {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        padding: 20px 0;
    }

    .footlinks h4,
    .footlinkss h4 {
        margin-top: 30px;
        font-size: 20px;
        font-weight: 600;
        color: white;
        margin-bottom: 30px;
        position: relative;
    }

    .footlinks h4::before,
    .footlinkss h4::before {
        content: "";
        position: absolute;
        height: 2px;
        width: 70px;
        left: 0;
        bottom: -7px;
        background: #007bff;
    }

    .rounded-full {
        border-radius: 9999px;
        padding-left: 12px;
    }
    .footlinks a {
        color: #a0a0a0;
        transition: all 0.3s ease;
    }

    .footlinks a:hover {
        color: #007bff;
        padding-left: 8px;
    }

    .social a {
        font-size: 25px;
        margin: 4px;
        height: 40px;
        width: 40px;
        color: #001529;
        background-color: #007bff;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        border-radius: 20px;
        transition: all 0.3s ease;
    }

    .social a:hover {
        transform: scale(1.2);
        background-color: white;
        color: #007bff;
    }

    .end {
        text-align: center;
        padding-top: 20px;
        color: #a0a0a0;
    }

    /* Hamburger Menu */
    .hamburger {
        display: none;
        flex-direction: column;
        gap: 5px;
        background: none;
        border: none;
        cursor: pointer;
    }

    .hamburger .line {
        width: 30px;
        height: 4px;
        background: white;
        border-radius: 2px;
    }

    /* Responsive Styles */
    @media screen and (max-width: 768px) {
        .navbar {
            padding: 0.5rem 1rem;
        }

        .navbar-links {
            display: none;
            flex-direction: column;
            gap: 1rem;
            position: absolute;
            top: 60px;
            right: 10px;
            background: rgba(0, 20, 40, 0.95);
            padding: 1rem 1.5rem;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
            width: auto;
            text-align: left;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease-out;
        }

        .navbar-links.active {
            display: flex;
            opacity: 1;
            transform: translateY(0);
        }

        .hamburger {
            display: flex;
        }

        .user-details-section {
            padding: 1rem;
            margin-top: 60px;
        }

        .user-details-section .container {
            max-width: 100%;
        }

        .user-details-section .flex {
            flex-direction: row;
            flex-wrap: wrap;
            gap: 0.75rem;
        }

        .user-details-section .items-center {
            flex: 1;
            min-width: 200px;
        }

        .user-details-section .text-xl {
            font-size: 1.125rem;
        }

        .main-content {
            padding: 1rem;
            margin-top: 1.5rem;
        }

        .footer-content {
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .footlinks h4::before,
        .footlinkss h4::before {
            left: 50%;
            transform: translateX(-50%);
        }

        /* Table responsiveness */
        .overflow-x-auto {
            margin: 0 -1rem;
            padding: 0 1rem;
            overflow-x: auto;
        }

        table {
            font-size: 0.875rem;
        }

        table td, 
        table th {
            padding: 0.75rem 0.5rem;
        }
    }

    @media screen and (max-width: 480px) {
        .user-details-section {
            padding: 0.75rem;
        }

        .user-details-section .flex {
            gap: 0.5rem;
        }

        .user-details-section .text-sm {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .user-details-section .text-sm .mx-2 {
            display: none;
        }

        .website-name {
            font-size: 1.5rem;
        }

        .logo {
            width: 40px;
            height: 40px;
        }

        .main-content {
            padding: 0.75rem;
            margin-top: 1rem;
        }

        table {
            font-size: 0.75rem;
        }

        table td, 
        table th {
            padding: 0.5rem 0.25rem;
        }
    }
    /* Add this to your existing style section */
    #searchInput {
        min-width: 250px; /* Increase this value to make it wider */
        width: 300px; /* Set a specific width */
    }

    /* Maintain responsiveness */
    @media screen and (max-width: 768px) {
        #searchInput {
            width: 100%; /* Full width on smaller screens */
            min-width: unset;
        }
    }
    /* Modified for larger screens */
    @media screen and (min-width: 769px) {
        .bg-gray-900 .flex {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .bg-gray-900 #searchInput {
            width: 800px; /* Increase this value from 200px to 300px or more */
        }

        /* Maintain slightly larger gap on bigger screens */
        .user-details-section .flex .items-center > div:last-child {
            margin-left: 1rem;
        }
    }
    /* Modal styles */
    .sensor-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.8);
    }

    .sensor-modal-content {
        position: relative;
        background-color: #1f2937;
        margin: 2% auto;
        padding: 20px;
        border-radius: 10px;
        width: 90%;
        max-width: 1200px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(0,0,0,0.5);
        animation: modalFadeIn 0.3s;
    }

    @keyframes modalFadeIn {
        from {opacity: 0; transform: translateY(-30px);}
        to {opacity: 1; transform: translateY(0);}
    }

    .close-modal {
        position: absolute;
        right: 20px;
        top: 15px;
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        z-index: 2;
    }

    .close-modal:hover {
        color: #fff;
    }

    /* Sensor dashboard mini widget */
    .sensor-widget {
        cursor: pointer;
        transition: all 0.3s;
    }

    .sensor-widget:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.2);
    }

    /* Chart styles */
    .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
    }

    /* Reading cards */
    .reading-card {
        position: relative;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        margin-bottom: 20px;
        background-color: #2d3748;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .temperature {
        font-size: 2.5rem;
        font-weight: 700;
        color: #dc3545;
        margin: 10px 0;
    }

    .humidity {
        font-size: 2.5rem;
        font-weight: 700;
        color: #007bff;
        margin: 10px 0;
    }

    .sensor-icon {
        font-size: 2rem;
        margin-bottom: 10px;
    }

    .timestamp {
        font-size: 0.8rem;
        color: #9ca3af;
    }

    .data-table {
        background-color: #1f2937;
        color: #e5e7eb;
    }

    .data-table thead {
        background-color: #111827;
    }

    /* Enhanced Tabbed Alerts Section */
    .alerts-container {
        background: rgba(26, 32, 44, 0.95);
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        margin-bottom: 2rem;
        overflow: hidden;
    }

    .alerts-tabs {
        display: flex;
        background: rgba(17, 24, 39, 0.95);
        border-bottom: 1px solid rgba(255, 255, 255, 0.08);
    }

    .alert-tab {
        flex: 1;
        padding: 1.25rem 1.5rem;
        cursor: pointer;
        font-weight: 600;
        color: #a0aec0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        border-bottom: 3px solid transparent;
    }

    .alert-tab:hover {
        color: #ffffff;
        background: rgba(45, 55, 72, 0.3);
    }

    .alert-tab.active {
        color: #ffffff;
        background: rgba(45, 55, 72, 0.5);
        border-bottom-color: #4299e1;
    }

    .alert-tab-icon {
        font-size: 1.25rem;
    }

    .alert-tab-badge {
        background: rgba(74, 85, 104, 0.5);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: bold;
        min-width: 24px;
        text-align: center;
    }

    .alert-tab.active .alert-tab-badge {
        background: rgba(66, 153, 225, 0.2);
    }

    .alert-tab-content {
        display: none;
        padding: 1.5rem;
        background: rgba(26, 32, 44, 0.95);
        animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(5px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .alert-tab-content.active {
        display: block;
    }

    .alert-item {
        background: rgba(45, 55, 72, 0.5);
        border-radius: 8px;
        padding: 1.25rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        border-left: 4px solid transparent;
    }

    .alert-item:last-child {
        margin-bottom: 0;
    }

    .alert-item-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .alert-item-title {
        display: flex;
        align-items: center;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .alert-item-icon {
        margin-right: 0.75rem;
        font-size: 1.25rem;
    }

    .alert-item-actions {
        display: flex;
        gap: 0.75rem;
    }

    .alert-item-list {
        list-style: none;
    }

    .alert-item-list li {
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .alert-item-list li:last-child {
        border-bottom: none;
    }

    .alert-item-details {
        flex: 1;
        min-width: 200px;
    }

    .alert-item-actions-small {
        display: flex;
        gap: 0.5rem;
    }

    /* Alert type specific styles */
    .alert-expiring {
        border-left-color: #ecc94b;
        background: rgba(234, 179, 8, 0.05);
    }

    .alert-expiring .alert-item-icon {
        color: #ecc94b;
    }

    .alert-expired {
        border-left-color: #f56565;
        background: rgba(245, 101, 101, 0.05);
    }

    .alert-expired .alert-item-icon {
        color: #f56565;
    }

    .alert-requests {
        border-left-color: #4299e1;
        background: rgba(66, 153, 225, 0.05);
    }

    .alert-requests .alert-item-icon {
        color: #4299e1;
    }

    /* Empty state */
    .alert-empty-state {
        text-align: center;
        padding: 2rem;
        color: #a0aec0;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .alerts-tabs {
            flex-direction: column;
        }

        .alert-tab {
            justify-content: flex-start;
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            border-left: 3px solid transparent;
        }

        .alert-tab.active {
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            border-left-color: #4299e1;
        }

        .alert-item-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .alert-item-actions {
            width: 100%;
            justify-content: flex-end;
        }
    }

    @media (max-width: 480px) {
        .alert-item-list li {
            flex-direction: column;
            align-items: flex-start;
        }

        .alert-item-actions-small {
            width: 100%;
            justify-content: flex-end;
        }
    }

    /* ... (keep all your other existing styles) ... */
    /* Enhanced Responsive Styles for Alert Tabs */
@media screen and (max-width: 768px) {
    /* Tab container adjustments */
    .alerts-tabs {
        flex-direction: row;
        overflow-x: auto;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
        padding-bottom: 5px;
    }
    
    .alert-tab {
        flex: 0 0 auto;
        padding: 0.8rem 1rem;
        font-size: 0.9rem;
        border-bottom: 3px solid transparent;
        border-left: none;
    }
    
    .alert-tab.active {
        border-bottom-color: #4299e1;
        border-left: none;
    }
    
    /* Tab content adjustments */
    .alert-tab-content {
        padding: 1rem;
    }
    
    .alert-item {
        padding: 1rem;
    }
    
    .alert-item-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.75rem;
    }
    
    .alert-item-actions {
        width: 100%;
        justify-content: flex-start;
    }
    
    /* List item adjustments */
    .alert-item-list li {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
        padding: 0.5rem 0;
    }
    
    .alert-item-details {
        width: 100%;
    }
    
    .alert-item-actions-small {
        width: 100%;
        justify-content: flex-end;
    }
    
    /* Empty state adjustments */
    .alert-empty-state {
        padding: 1.5rem 1rem;
    }
    
    /* Badge adjustments */
    .alert-tab-badge {
        margin-left: 0.5rem;
    }
}

@media screen and (max-width: 480px) {
    /* Even smaller screens */
    .alert-tab {
        padding: 0.7rem 0.8rem;
        font-size: 0.85rem;
    }
    
    .alert-tab-icon {
        font-size: 1rem;
    }
    
    .alert-tab-badge {
        font-size: 0.65rem;
        min-width: 20px;
    }
    
    /* Button adjustments */
    .alert-item-actions .bg-green-600,
    .alert-item-actions .bg-red-600 {
        padding: 0.5rem 0.8rem;
        font-size: 0.8rem;
    }
    
    .alert-item-actions-small .bg-blue-600,
    .alert-item-actions-small .bg-red-600,
    .alert-item-actions-small .bg-green-600 {
        padding: 0.3rem 0.6rem;
        font-size: 0.75rem;
    }
    
    /* Text adjustments */
    .alert-item-title {
        font-size: 1rem;
    }
    
    .alert-item-details strong {
        font-size: 0.95rem;
    }
    
    .alert-item-details .text-sm {
        font-size: 0.75rem;
    }
}

/* Hide scrollbar for tabs but keep functionality */
.alerts-tabs::-webkit-scrollbar {
    height: 3px;
}

.alerts-tabs::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
}

/* Smooth transition for tab switching */
.alert-tab-content {
    transition: opacity 0.3s ease;
}

    </style>
</head>
<body>
    <!-- ... (keep all your existing HTML until the alerts section) ... -->
    <nav class="navbar">
        <div class="navbar-logo">
            <img src="files/logo.png" alt="Logo" class="logo">
            <span class="website-name">Food<span class="highlight-food">Yield</span></span>
        </div>
        <div class="navbar-links">
            <a href="/" class="nav-link">Home</a>
            <a href="/info" class="nav-link">Donate</a>
            <a href="/reqfood" class="nav-link">Ask for Donate</a>
            <a href="/viewrequests" class="nav-link">Requests</a>
            <a href="/donations" class="nav-link">Available Donations</a>
            <a href="/register" class="nav-link">Administration</a>
        </div>
        <button class="hamburger" onclick="toggleMenu()">
            <div class="line"></div>
            <div class="line"></div>
            <div class="line"></div>
        </button>
    </nav>

    <div class="user-details-section fade-in">
        <div class="container mx-auto">
            <div class="flex justify-between items-center">
                <div class="flex items-center space-x-4">
                    <div class="bg-blue-500 rounded-full p-2">
                        <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold"><%= user.username %></h2>
                        <div class="text-sm text-gray-300">
                            <span><%= user.companyName %></span>
                            <span class="mx-2">•</span>
                            <span><%= user.email %></span>
                        </div>
                    </div>
                </div>
                <div class="profile-dropdown relative">
                    <button onclick="toggleProfileDropdown()" class="dropdown-toggle">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                        </svg>
                    </button>
                    <div id="profileDropdown" class="dropdown-menu hidden">
                        <form action="/logout" method="POST">
                            <button type="submit" class="dropdown-item">Logout</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- New Sensor Widget Section -->
    <div class="w-full">
        <div class="w-full">
            <div class="sensor-widget bg-gray-900 rounded-lg shadow-md p-4 w-full" onclick="openSensorModal()">
                <!-- Layout for larger screens (flex row) -->
                <div class="hidden md:flex md:items-center md:justify-between">
                    <div class="flex items-center">
                        <h3 class="text-lg font-medium">Storage Environment:</h3>
                    </div>
                    
                    <div class="flex items-center mx-4">
                        <div class="text-xl mr-2">🌡️</div>
                        <h4 class="text-base text-gray-400 mr-2">Temperature:</h4>
                        <div class="text-lg font-medium text-red-500" id="currentTemp">Value</div>
                    </div>
                    
                    <div class="flex items-center mx-4">
                        <div class="text-xl mr-2">💧</div>
                        <h4 class="text-base text-gray-400 mr-2">Humidity:</h4>
                        <div class="text-lg font-medium text-blue-500" id="currentHumidity">Value</div>
                    </div>
                    
                    <button class="text-blue-400 hover:text-blue-300 text-lg">
                        View Details →
                    </button>
                </div>
                
                <!-- Layout for mobile (stacked) -->
                <div class="md:hidden space-y-3">
                    <div class="flex items-center justify-between" onclick="openSensorModal()">
                        <h3 class="text-lg font-medium">Storage Environment</h3>
                        <button class="text-blue-400 hover:text-blue-300 text-sm ">
                            View Details →
                        </button>
                    </div>
                    
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <div class="text-xl mr-2">🌡️</div>
                            <h4 class="text-sm text-gray-400 mr-2">Temp:</h4>
                            <div class="text-lg font-medium text-red-500" id="currentTempMobile">Value</div>
                        </div>
                        
                        <div class="flex items-center">
                            <div class="text-xl mr-2">💧</div>
                            <h4 class="text-sm text-gray-400 mr-2">Humidity:</h4>
                            <div class="text-lg font-medium text-blue-500" id="currentHumidityMobile">Value</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Sensor Dashboard Modal -->
    <div id="sensorModal" class="sensor-modal">
        <div class="sensor-modal-content">
            <span class="close-modal" onclick="closeSensorModal()">&times;</span>
            
            <div class="header-container mb-6">
                <h1 class="text-3xl font-bold mb-2"><span class="text-blue-400">Temperature & Humidity 🌡️</span> Dashboard</h1>
                <p class="text-gray-400">Monitor storage conditions for food safety and quality</p>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div class="reading-card">
                    <div class="sensor-icon">🌡️</div>
                    <h3 class="text-xl font-bold">Current Temperature</h3>
                    <div class="temperature" id="modalTemp">25.2°C</div>
                    <p class="timestamp" id="tempTimestamp">Last updated: 2/28/2025 13:45:22</p>
                </div>
                <div class="reading-card">
                    <div class="sensor-icon">💧</div>
                    <h3 class="text-xl font-bold">Current Humidity</h3>
                    <div class="humidity" id="modalHumidity">62.4%</div>
                    <p class="timestamp" id="humidityTimestamp">Last updated: 2/28/2025 13:45:22</p>
                </div>
            </div>

            <div class="bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
                <h5 class="text-xl font-bold mb-4">Temperature & Humidity History</h5>
                <div class="chart-container">
                    <canvas id="sensorChart"></canvas>
                </div>
            </div>

            <div class="bg-gray-800 rounded-lg shadow-lg p-6">
                <h5 class="text-xl font-bold mb-4">Recent Readings</h5>
                <div class="overflow-x-auto">
                    <table class="w-full data-table">
                        <thead>
                            <tr>
                                <th class="px-4 py-2 text-left">Timestamp</th>
                                <th class="px-4 py-2 text-left">Temperature (°C)</th>
                                <th class="px-4 py-2 text-left">Humidity (%)</th>
                            </tr>
                        </thead>
                        <tbody id="sensorTableBody">
                            <!-- Table rows will be populated dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
            
            <p class="text-gray-400 text-sm mt-4 text-center">This dashboard automatically refreshes every 30 seconds</p>
        </div>
    </div>

    <!-- Enhanced Tabbed Alerts Section -->
    <div class="alerts-container">
        <div class="alerts-tabs">
            <div class="alert-tab <%= expiringProducts.length > 0 ? 'active' : '' %>" onclick="switchAlertTab('expiring')">
                <i class="alert-tab-icon bx bx-time"></i>
                <span>Expiring Soon</span>
                <% if (expiringProducts.length > 0) { %>
                <span class="alert-tab-badge"><%= expiringProducts.length %></span>
                <% } %>
            </div>
            <div class="alert-tab <%= expiredProducts && expiredProducts.length > 0 ? 'active' : '' %>" onclick="switchAlertTab('expired')">
                <i class="alert-tab-icon bx bx-error-circle"></i>
                <span>Expired</span>
                <% if (expiredProducts && expiredProducts.length > 0) { %>
                <span class="alert-tab-badge"><%= expiredProducts.length %></span>
                <% } %>
            </div>
            <div class="alert-tab <%= productRequests && productRequests.length > 0 ? 'active' : '' %>" onclick="switchAlertTab('requests')">
                <i class="alert-tab-icon bx bx-envelope"></i>
                <span>Requests</span>
                <% if (productRequests && productRequests.length > 0) { %>
                <span class="alert-tab-badge"><%= productRequests.length %></span>
                <% } %>
            </div>
        </div>

        <div class="alert-tab-content <%= expiringProducts.length > 0 ? 'active' : '' %>" id="expiring-content">
            <% if (expiringProducts.length > 0) { %>
            <div class="alert-item alert-expiring">
                <div class="alert-item-header">
                    <div class="alert-item-title">
                        <i class="alert-item-icon bx bx-time"></i>
                        <span>Products Expiring Soon</span>
                    </div>
                    <div class="alert-item-actions">
                        <form action="/manage-all-products" method="POST" class="inline">
                            <button type="submit" 
                                    class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors text-sm font-medium flex items-center">
                                <i class="bx bx-check-circle mr-2"></i> Manage All
                            </button>
                        </form>
                        <button onclick="showDisposeModal()"
                                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors text-sm font-medium flex items-center">
                            <i class="bx bx-trash mr-2"></i> Dispose
                        </button>
                    </div>
                </div>
                <ul class="alert-item-list">
                    <% expiringProducts.forEach(product => { %>
                    <li>
                        <div class="alert-item-details">
                            <strong class="text-white"><%= product.productName %></strong> - Expires in 
                            <span class="text-yellow-400 font-medium"><%= Math.ceil((product.expiryDate - new Date()) / (1000 * 60 * 60 * 24)) %> days</span>
                            <span class="text-gray-400 text-sm">(Quantity: <%= product.quantity %>)</span>
                        </div>
                        <div class="alert-item-actions-small">
                            <form action="/manage-product/<%= product._id %>" method="POST" class="inline">
                                <button type="button" onclick="showManageProductModal('<%= product._id %>')"
                                        class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-xs font-medium">
                                    Manage
                                </button>
                            </form>
                            <button onclick="showSingleDisposeModal('<%= product._id %>', '<%= product.productName %>', <%= product.quantity %>)"
                                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-xs font-medium">
                                Dispose
                            </button>
                        </div>
                    </li>
                    <% }); %>
                </ul>
            </div>
            <% } else { %>
            <div class="alert-empty-state">
                <i class="bx bx-check-circle text-4xl text-gray-500 mb-2"></i>
                <p class="text-gray-400">No products expiring soon</p>
            </div>
            <% } %>
        </div>

        <div class="alert-tab-content <%= expiredProducts && expiredProducts.length > 0 ? 'active' : '' %>" id="expired-content">
            <% if (expiredProducts && expiredProducts.length > 0) { %>
            <div class="alert-item alert-expired">
                <div class="alert-item-header">
                    <div class="alert-item-title">
                        <i class="alert-item-icon bx bx-error-circle"></i>
                        <span>Expired Products</span>
                    </div>
                    <div class="alert-item-actions">
                        <button onclick="showExpiredDisposeModal()"
                                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors text-sm font-medium flex items-center">
                            <i class="bx bx-trash mr-2"></i> Dispose All
                        </button>
                    </div>
                </div>
                <ul class="alert-item-list">
                    <% expiredProducts.forEach(product => { %>
                    <li>
                        <div class="alert-item-details">
                            <strong class="text-white"><%= product.productName %></strong> - Expired 
                            <span class="text-red-400 font-medium"><%= Math.abs(Math.ceil((product.expiryDate - new Date()) / (1000 * 60 * 60 * 24))) %> days ago</span>
                            <span class="text-gray-400 text-sm">(Quantity: <%= product.quantity %>)</span>
                        </div>
                        <div class="alert-item-actions-small">
                            <button onclick="showSingleDisposeModal('<%= product._id %>', '<%= product.productName %>', <%= product.quantity %>)"
                                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-xs font-medium">
                                Dispose
                            </button>
                        </div>
                    </li>
                    <% }); %>
                </ul>
            </div>
            <% } else { %>
            <div class="alert-empty-state">
                <i class="bx bx-check-circle text-4xl text-gray-500 mb-2"></i>
                <p class="text-gray-400">No expired products</p>
            </div>
            <% } %>
        </div>

        <div class="alert-tab-content <%= productRequests && productRequests.length > 0 ? 'active' : '' %>" id="requests-content">
            <% if (productRequests && productRequests.length > 0) { %>
            <div class="alert-item alert-requests">
                <div class="alert-item-header">
                    <div class="alert-item-title">
                        <i class="alert-item-icon bx bx-envelope"></i>
                        <span>Product Requests</span>
                    </div>
                </div>
                <ul class="alert-item-list">
                    <% productRequests.forEach(request => { %>
                    <li id="request-<%= request._id %>">
                        <div class="alert-item-details">
                            <strong class="text-white"><%= request.requesterName %></strong> requested 
                            <span class="<%= request.isExpired ? 'text-red-400' : 'text-yellow-400' %>"><%= request.isExpired ? 'expired' : 'expiring' %></span>
                            product "<%= request.productName %>"
                            <div class="text-sm text-gray-400 mt-1">
                                <span><%= request.requestDate.toLocaleDateString() %></span> • 
                                <span><%= request.requesterEmail %></span> • 
                                <span><%= request.requesterPhone %></span>
                            </div>
                        </div>
                        <div class="alert-item-actions-small">
                            <button onclick="acceptRequest('<%= request._id %>')"
                                    class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-xs font-medium">
                                Accept
                            </button>
                            <button onclick="rejectRequest('<%= request._id %>')"
                                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-xs font-medium">
                                Reject
                            </button>
                        </div>
                    </li>
                    <% }); %>
                </ul>
            </div>
            <% } else { %>
            <div class="alert-empty-state">
                <i class="bx bx-check-circle text-4xl text-gray-500 mb-2"></i>
                <p class="text-gray-400">No product requests</p>
            </div>
            <% } %>
        </div>
    </div>
 <!-- Dispose Modal -->
 <div id="disposeModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-96">
        <h3 class="text-xl font-bold text-gray-900 mb-4">Dispose Products</h3>
        <form id="disposeForm" action="/dispose-products" method="POST">
            <% expiringProducts.forEach(product => { %>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2">
                    <%= product.productName %> (Max: <%= product.quantity %>)
                </label>
                <input type="number" name="quantities[<%= product._id %>]" 
                       max="<%= product.quantity %>" min="0"
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <% }); %>
            <div class="flex justify-end space-x-2">
                <button type="button" onclick="hideDisposeModal()"
                        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors">
                    Cancel
                </button>
                <button type="submit"
                        class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors">
                    Dispose
                </button>
            </div>
        </form>
    </div>
</div>
    <!-- ... (keep all your existing modals and other HTML) ... -->
      <!-- Expired Products Dispose Modal -->
    <div id="expiredDisposeModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-96">
            <h3 class="text-xl font-bold text-gray-900 mb-4">Dispose Expired Products</h3>
            <p class="text-red-600 mb-4">These products have expired and should be disposed of.</p>
            <form id="expiredDisposeForm" action="/dispose-expired-products" method="POST">
                <% expiredProducts.forEach(product => { %>
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2">
                        <%= product.productName %> (Max: <%= product.quantity %>)
                    </label>
                    <input type="number" name="quantities[<%= product._id %>]" 
                           value="<%= product.quantity %>" max="<%= product.quantity %>" min="0"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
                <% }); %>
                <div class="flex justify-end space-x-2">
                    <button type="button" onclick="hideExpiredDisposeModal()"
                            class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors">
                        Cancel
                    </button>
                    <button type="submit"
                            class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors">
                        Dispose All
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Add Product Form -->
    <div class="bg-gray-900 text-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-2xl font-bold mb-6">Add New Product</h2>
        <form action="/add-product" method="POST" class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <label class="block text-sm mb-2">Product Name</label>
                <input type="text" name="productName" placeholder="Enter the Product Name" required 
                       class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            
            <div>
                <label class="block text-sm mb-2">Quantity(Kg)/Items</label>
                <input type="number" name="quantity" placeholder="Enter Quantity" 
                       class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            
            <div>
                <label class="block text-sm mb-2">Location</label>
                <input type="text" name="manufacturer" placeholder="Enter the Product's Location" 
                       class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            
            <div>
                <label class="block text-sm mb-2">Expiry Date</label>
                <input type="date" name="expiryDate" required 
                       class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            
            <div class="md:col-span-2">
                <button type="submit" 
                        class="btn-primary w-full py-3">
                    Add Product
                </button>
            </div>
        </form>
    </div>

    <!-- Products List -->
    <div class="bg-gray-900 text-white rounded-lg shadow-lg p-6">
        <div class="flex flex-wrap items-start gap-4 mb-6">
            <h2 class="text-2xl font-bold whitespace-nowrap">Product Inventory</h2>
            <div class="w-full sm:w-auto">
                <input type="text" id="searchInput"
                    placeholder="Search products..."
                    class="w-full sm:w-96 px-4 py-2 border rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
        </div>
        
        <div class="overflow-x-auto">
            <table class="min-w-full table-auto">
                <thead>
                    <tr>
                        <th class="px-6 py-3 text-left">Product Name</th>
                        <th class="px-6 py-3 text-left">Quantity</th>
                        <th class="px-6 py-3 text-left">Location</th>
                        <th class="px-6 py-3 text-left">Expiry Date</th>
                        <th class="px-6 py-3 text-left">Days Until Expiry</th>
                        <th class="px-6 py-3 text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="productTableBody">
                    <% products.forEach(product => { 
                        const daysToExpiry = Math.ceil((product.expiryDate - new Date()) / (1000 * 60 * 60 * 24));
                        const isExpired = daysToExpiry <= 0;
                    %>
                    <tr class="border-b border-gray-800 product-row <%= isExpired ? 'bg-red-900 bg-opacity-50' : '' %>">
                        <td class="px-6 py-4 product-name">
                            <%= product.productName %>
                            <% if (isExpired) { %>
                                <span class="ml-2 text-red-300 font-bold">(EXPIRED)</span>
                            <% } %>
                        </td>
                        <td class="px-6 py-4"><%= product.quantity %></td>
                        <td class="px-6 py-4"><%= product.manufacturer %></td>
                        <td class="px-6 py-4"><%= product.expiryDate.toLocaleDateString() %></td>
                        <td class="px-6 py-4">
                            <% if (isExpired) { %>
                                <span class="text-red-300 font-bold">Expired <%= Math.abs(daysToExpiry) %> days ago</span>
                            <% } else { %>
                                <%= daysToExpiry %>
                            <% } %>
                        </td>
                        <td class="px-6 py-4">
                            <div class="relative flex justify-center">
                                <button onclick="toggleDropdown('<%= product._id %>')" 
                                        class="text-white text-xl font-bold hover:bg-gray-700 rounded-full h-8 w-8 flex items-center justify-center">⋮</button>
                                        <div id="dropdown-<%= product._id %>" class="hidden absolute right-0 mt-8 w-48 bg-white rounded-md shadow-lg z-10">
                                            <% if (!isExpired) { %>
                                            <button onclick="showManageProductModal('<%= product._id %>')"
                                                    class="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100">
                                                Manage
                                            </button>
                                            <% } %>
                                            <button onclick="showProductDisposeModal('<%= product._id %>', '<%= product.productName %>', '<%= product.quantity %>')"
                                                    class="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100">
                                                Dispose
                                            </button>
                                        </div>
                            </div>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Single Product Dispose Modal -->
<div id="productDisposeModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-96">
        <h3 class="text-xl font-bold text-gray-900 mb-4">Dispose Product</h3>
        <p id="productDisposeText" class="text-gray-700 mb-4"></p>
        <form id="productDisposeForm" onsubmit="handleDisposeForm(event)">
            <input type="hidden" id="productDisposeId" name="productId">
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="productDisposeQuantity">
                    Quantity to Dispose
                </label>
                <input type="number" id="productDisposeQuantity" name="quantity" required
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700">
            </div>
            <div class="flex justify-end space-x-2">
                <button type="button" onclick="hideProductDisposeModal()"
                        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                    Cancel
                </button>
                <button type="submit"
                        class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
                    Dispose
                </button>
            </div>
        </form>
    </div>
</div>
    <!-- Single Product Dispose Modal -->
<div id="singleDisposeModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-96">
        <h3 class="text-xl font-bold text-gray-900 mb-4">Dispose Product</h3>
        <p id="singleDisposeProductName" class="text-gray-700 mb-2"></p>
        <p class="text-red-600 mb-4">This product has expired and should be disposed of.</p>
        <form id="singleDisposeForm">
            <input type="hidden" id="singleDisposeProductId" name="productId">
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="singleDisposeQuantity">
                    Quantity to Dispose (Max: <span id="singleDisposeMaxQty">0</span>)
                </label>
                <input type="number" id="singleDisposeQuantity" name="quantity" required min="1"
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div class="flex justify-end space-x-2">
                <button type="button" onclick="hideSingleDisposeModal()"
                        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors">
                    Cancel
                </button>
                <button type="submit"
                        class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors">
                    Dispose
                </button>
            </div>
        </form>
    </div>
</div>


    <!-- Accept Request Confirmation Modal -->
    <div id="acceptRequestModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-96">
            <h3 class="text-xl font-bold text-gray-900 mb-4">Confirm Acceptance</h3>
            <p id="acceptRequestMessage" class="text-gray-700 mb-4">Are you sure you want to accept this request? The product will be removed from listings.</p>
            <input type="hidden" id="acceptRequestId">
            <div class="flex justify-end space-x-2">
                <button type="button" onclick="hideAcceptRequestModal()"
                        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors">
                    Cancel
                </button>
                <button type="button" onclick="confirmAcceptRequest()"
                        class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors">
                    Accept
                </button>
            </div>
        </div>
    </div>
    
    <!-- Reject Request Confirmation Modal -->
    <div id="rejectRequestModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-96">
            <h3 class="text-xl font-bold text-gray-900 mb-4">Confirm Rejection</h3>
            <p id="rejectRequestMessage" class="text-gray-700 mb-4">Are you sure you want to reject this request?</p>
            <input type="hidden" id="rejectRequestId">
            <div class="flex justify-end space-x-2">
                <button type="button" onclick="hideRejectRequestModal()"
                        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors">
                    Cancel
                </button>
                <button type="button" onclick="confirmRejectRequest()"
                        class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors">
                    Reject
                </button>
            </div>
        </div>
    </div>
    <!-- Manage Product Confirmation Modal -->
    <div id="manageProductModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-96">
            <h3 class="text-xl font-bold text-gray-900 mb-4">Manage Product</h3>
            <p id="manageProductMessage" class="text-gray-700 mb-4">Are you sure you want to manage this product? You'll be redirected to the management page.</p>
            <form id="manageProductForm" method="POST">
                <input type="hidden" id="manageProductId" name="productId">
                <div class="flex justify-end space-x-2">
                    <button type="button" onclick="hideManageProductModal()"
                            class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors">
                        Cancel
                    </button>
                    <button type="submit"
                            class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors">
                        Manage
                    </button>
                </div>
            </form>
        </div>
    </div>
    <section class="footer fade-in">
        <div class="footer-content">
            <div class="footlinks">
                <h4>Quick Links</h4>
                <ul>
                    <li><a href="donate.ejs">Donate</a></li>
                    <li><a href="about.html">About Us</a></li>
                    <li><a href="contact.html">Contact Us</a></li>
                </ul>
            </div>
            <div class="footlinkss">
                <h4>Connect</h4>
                <div class="social">
                    <a href="#"><i class='bx bxl-facebook'></i></a>
                    <a href="#"><i class='bx bxl-instagram'></i></a>
                    <a href="#"><i class='bx bxl-twitter'></i></a>
                    <a href="#"><i class='bx bxl-linkedin'></i></a>
                    <a href="#"><i class='bx bxl-youtube'></i></a>
                    <a href="#"><i class='bx bxl-github'></i></a>
                </div>
            </div>
        </div>
        <div class="end">
            <p>Copyright © 2023 FoodYield | All Rights Reserved.</p>
        </div>
    </section>

    <script>
        // Tab switching functionality
        function switchAlertTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.alert-tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.alert-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab content
            const content = document.getElementById(`${tabName}-content`);
            if (content) {
                content.classList.add('active');
            }
            
            // Add active class to selected tab
            const tab = document.querySelector(`.alert-tab[onclick="switchAlertTab('${tabName}')"]`);
            if (tab) {
                tab.classList.add('active');
            }
        }

        // Initialize active tab on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Set the first tab with content as active if none is active
            const tabs = document.querySelectorAll('.alert-tab');
            let activeTabFound = false;
            
            tabs.forEach(tab => {
                if (tab.classList.contains('active')) {
                    activeTabFound = true;
                }
            });
            
            if (!activeTabFound && tabs.length > 0) {
                // Find the first tab that has content
                for (let i = 0; i < tabs.length; i++) {
                    const tabName = tabs[i].getAttribute('onclick').match(/'([^']+)'/)[1];
                    const content = document.getElementById(`${tabName}-content`);
                    
                    if (content && content.innerHTML.trim() !== '<div class="alert-empty-state"><i class="bx bx-check-circle text-4xl text-gray-500 mb-2"></i><p class="text-gray-400">No product requests</p></div>') {
                        tabs[i].classList.add('active');
                        content.classList.add('active');
                        break;
                    }
                }
            }
        });

        // ... (keep all your other existing JavaScript functions) ...
         // Search functionality
         document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('.product-row');
            rows.forEach(row => {
                const productName = row.querySelector('.product-name').textContent.toLowerCase();
                row.style.display = productName.includes(searchTerm) ? '' : 'none';
            });
        });
    
        // Dropdown toggle
        function toggleDropdown(productId) {
            event.stopPropagation(); // Prevent event bubbling
            const dropdown = document.getElementById(`dropdown-${productId}`);
            // Close all other dropdowns first
            document.querySelectorAll('[id^="dropdown-"]').forEach(d => {
                if (d.id !== `dropdown-${productId}`) d.classList.add('hidden');
            });
            dropdown.classList.toggle('hidden');
        }
    
        // Close dropdowns when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.relative')) {
                document.querySelectorAll('[id^="dropdown-"]').forEach(d => {
                    d.classList.add('hidden');
                });
            }
        });
    
        // Product dispose modal functions
        function showProductDisposeModal(productId, productName, maxQuantity) {
            // Close any open dropdowns
            document.querySelectorAll('[id^="dropdown-"]').forEach(d => {
                d.classList.add('hidden');
            });
            
            const modal = document.getElementById('productDisposeModal');
            const quantityInput = document.getElementById('productDisposeQuantity');
            
            document.getElementById('productDisposeId').value = productId;
            document.getElementById('productDisposeText').textContent = `Dispose ${productName}`;
            quantityInput.max = maxQuantity;
            quantityInput.value = ''; // Clear previous value
            quantityInput.placeholder = `Max: ${maxQuantity}`;
            
            modal.classList.remove('hidden');
        }
    
        function hideProductDisposeModal() {
            document.getElementById('productDisposeModal').classList.add('hidden');
        }
    
        // Close modal when clicking outside
        document.getElementById('productDisposeModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideProductDisposeModal();
            }
        });
    
        
        // Hamburger menu toggle function
        function toggleMenu() {
            const navbarLinks = document.querySelector('.navbar-links');
            navbarLinks.classList.toggle('active');
        }
    
        // Click outside to close menu
        document.addEventListener('click', function(event) {
            const navbar = document.querySelector('.navbar');
            const navbarLinks = document.querySelector('.navbar-links');
            const hamburger = document.querySelector('.hamburger');
    
            if (!navbar.contains(event.target) && !hamburger.contains(event.target)) {
                navbarLinks.classList.remove('active');
            }
        });
        
        // Add this function to your existing scripts
        function toggleProfileDropdown() {
            const dropdown = document.getElementById('profileDropdown');
            dropdown.classList.toggle('hidden');
        }

        // Add this event listener to your existing scripts
        document.addEventListener('click', function(event) {
            const dropdown = document.getElementById('profileDropdown');
            const toggleButton = event.target.closest('.dropdown-toggle');
            
            if (!toggleButton && !dropdown.contains(event.target)) {
                dropdown.classList.add('hidden');
            }
        });

        // Add these functions to your existing script section
        function showExpiredDisposeModal() {
            document.getElementById('expiredDisposeModal').classList.remove('hidden');
        }

        function hideExpiredDisposeModal() {
            document.getElementById('expiredDisposeModal').classList.add('hidden');
        }

        // Close expired modal when clicking outside
        document.addEventListener('DOMContentLoaded', function() {
            const expiredModal = document.getElementById('expiredDisposeModal');
            if (expiredModal) {
                expiredModal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        hideExpiredDisposeModal();
                    }
                });
            }
        });

        function showDisposeModal() {
            document.getElementById('disposeModal').classList.remove('hidden');
        }
    
        function hideDisposeModal() {
            document.getElementById('disposeModal').classList.add('hidden');
        }

        // Tab switching functionality
        function switchAlertTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.alert-tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.alert-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab content
            document.getElementById(`${tabName}-content`).classList.add('active');
            
            // Add active class to selected tab
            document.querySelector(`.alert-tab[onclick="switchAlertTab('${tabName}')"]`).classList.add('active');
        }

       // Show accept request modal
function acceptRequest(requestId) {
    document.getElementById('acceptRequestId').value = requestId;
    document.getElementById('acceptRequestModal').classList.remove('hidden');
}

// Show reject request modal
function rejectRequest(requestId) {
    document.getElementById('rejectRequestId').value = requestId;
    document.getElementById('rejectRequestModal').classList.remove('hidden');
}

// Hide accept request modal
function hideAcceptRequestModal() {
    document.getElementById('acceptRequestModal').classList.add('hidden');
}

// Hide reject request modal
function hideRejectRequestModal() {
    document.getElementById('rejectRequestModal').classList.add('hidden');
}

// Confirm accept request
function confirmAcceptRequest() {
    const requestId = document.getElementById('acceptRequestId').value;
    hideAcceptRequestModal();
    
    fetch('/accept-request', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ requestId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Remove the request from the UI
            const requestElement = document.getElementById(`request-${requestId}`);
            if (requestElement) {
                requestElement.remove();
            }
            
            // If no more requests, hide the container
            const requestItems = document.querySelectorAll('[id^="request-"]');
            if (requestItems.length === 0) {
                document.querySelector('.alert-tab-content#requests-content .alert-item').innerHTML = 
                    '<p class="text-gray-400 text-center py-4">No product requests</p>';
            }
        } else {
            throw new Error(data.message || 'Failed to accept request');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error: ' + error.message);
    });
}

// Confirm reject request
function confirmRejectRequest() {
    const requestId = document.getElementById('rejectRequestId').value;
    hideRejectRequestModal();
    
    fetch('/reject-request', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ requestId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Remove the request from the UI
            const requestElement = document.getElementById(`request-${requestId}`);
            if (requestElement) {
                requestElement.remove();
            }
            
            // If no more requests, hide the container
            const requestItems = document.querySelectorAll('[id^="request-"]');
            if (requestItems.length === 0) {
                document.querySelector('.alert-tab-content#requests-content .alert-item').innerHTML = 
                    '<p class="text-gray-400 text-center py-4">No product requests</p>';
            }
        } else {
            throw new Error(data.message || 'Failed to reject request');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error: ' + error.message);
    });
}

// Close modals when clicking outside
document.getElementById('acceptRequestModal').addEventListener('click', function(e) {
    if (e.target === this) {
        hideAcceptRequestModal();
    }
});

document.getElementById('rejectRequestModal').addEventListener('click', function(e) {
    if (e.target === this) {
        hideRejectRequestModal();
    }
});
        // Replace the existing sensor data JavaScript with this code
        // This will fetch real-time data from your API endpoint
// Handle dispose form submission
async function handleDisposeForm(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const productId = formData.get('productId');
    const quantity = formData.get('quantity');
    
    try {
        const response = await fetch('/dispose-product', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId: productId,
                quantity: quantity
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            hideProductDisposeModal();
            // Show success message and reload the page
            alert('Product disposed successfully');
            window.location.reload();
        } else {
            alert('Error: ' + result.message);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error disposing product');
    }
}
        // Function to fetch sensor data from the API
        async function fetchSensorData() {
            try {
                const response = await fetch('/api/sensor-data');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return await response.json();
            } catch (error) {
                console.error('Error fetching sensor data:', error);
                return [];
            }
        }

        // Format timestamp nicely
        function formatTimestamp(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString();
        }

        // Function to check temperature and return alert HTML based on screen size
        // Function to get color based on temperature
        function getTemperatureColor(temp) {
            // Define temperature ranges
            // Below 0°C: Blue
            // 0-10°C: Light blue to green
            // 10-20°C: Green to yellow
            // Above 20°C: Yellow to red
            
            if (temp <= 0) {
                return '#0077ff'; // Blue for freezing
            } else if (temp <= 10) {
                // Gradient from blue to green
                const ratio = temp / 10;
                const r = Math.floor(0 + (ratio * 50));
                const g = Math.floor(119 + (ratio * 136));
                const b = Math.floor(255 - (ratio * 100));
                return `rgb(${r},${g},${b})`;
            } else if (temp <= 20) {
                // Gradient from green to yellow/orange
                const ratio = (temp - 10) / 10;
                const r = Math.floor(50 + (ratio * 205));
                const g = Math.floor(255 - (ratio * 100));
                const b = Math.floor(155 - (ratio * 155));
                return `rgb(${r},${g},${b})`;
            } else {
                // Gradient to deep red for high temperatures
                const ratio = Math.min((temp - 20) / 15, 1); // Cap at 35°C for max red
                const r = 255;
                const g = Math.floor(155 - (ratio * 155));
                const b = 0;
                return `rgb(${r},${g},${b})`;
            }
        }

        // Function to check temperature and return alert HTML based on screen size
        function getTemperatureAlert(temperature, isCompact = false) {
            // Get the color for this temperature
            const tempColor = getTemperatureColor(temperature);
            
            if (temperature > 10) {
                if (isCompact) {
                    // Compact version for small screens or table rows
                    return `<span class="ml-1 font-bold text-xs md:text-sm" style="color:${tempColor}">⚠️</span>`;
                } else {
                    // Full version for larger spaces
                    return `<span class="ml-1 font-bold text-xs md:text-sm lg:text-base animate-pulse" style="color:${tempColor}">⚠️ <span class="hidden sm:inline-block">HIGH TEMP</span> ALERT</span>`;
                }
            }
            return '';
        }

        // Update the dashboard with the latest data
        async function updateSensorDashboard() {
            const sensorData = await fetchSensorData();
            
            if (sensorData && sensorData.length > 0) {
                const latestReading = sensorData[0];
                const tempValue = latestReading.temperature.toFixed(1);
                
                // Update mini-widget (main view)
                const mainTempAlert = getTemperatureAlert(latestReading.temperature);
                const tempColor = getTemperatureColor(latestReading.temperature);
                document.getElementById('currentTemp').innerHTML = `<span style="color:${tempColor}">${tempValue}°C</span>${mainTempAlert}`;
                document.getElementById('currentHumidity').textContent = latestReading.humidity.toFixed(1) + '%';
                
                // Check if mobile elements exist before updating them (more compact for mobile)
                const tempMobile = document.getElementById('currentTempMobile');
                const humidityMobile = document.getElementById('currentHumidityMobile');
                
                if(tempMobile) {
                    const mobileTempAlert = getTemperatureAlert(latestReading.temperature, true);
                    tempMobile.innerHTML = tempValue + '°C' + mobileTempAlert;
                }
                
                if(humidityMobile) {
                    humidityMobile.textContent = latestReading.humidity.toFixed(1) + '%';
                }
                
                // Update modal data (full alert for modal)
                document.getElementById('modalTemp').innerHTML = tempValue + '°C' + mainTempAlert;
                document.getElementById('modalHumidity').textContent = latestReading.humidity.toFixed(1) + '%';
                
                document.getElementById('tempTimestamp').textContent = 'Last updated: ' + formatTimestamp(latestReading.timestamp);
                document.getElementById('humidityTimestamp').textContent = 'Last updated: ' + formatTimestamp(latestReading.timestamp);
                
                // Update table (compact alerts for table rows)
                const tableBody = document.getElementById('sensorTableBody');
                tableBody.innerHTML = '';
                
                sensorData.forEach(reading => {
                    const row = document.createElement('tr');
                    row.className = 'border-b border-gray-700';
                    const rowTempAlert = getTemperatureAlert(reading.temperature, true);
                    
                    row.innerHTML = `
                        <td class="px-4 py-2">${formatTimestamp(reading.timestamp)}</td>
                        <td class="px-4 py-2">${reading.temperature.toFixed(1)}°C ${rowTempAlert}</td>
                        <td class="px-4 py-2">${reading.humidity.toFixed(1)}%</td>
                    `;
                    
                    tableBody.appendChild(row);
                });

                // If the chart is visible, update it
                const chartCanvas = document.getElementById('sensorChart');
                if (chartCanvas && chartCanvas.chart) {
                    updateSensorChart(sensorData, chartCanvas.chart);
                }
            }
        }

        // Initialize the chart
        function initSensorChart() {
            const ctx = document.getElementById('sensorChart').getContext('2d');
            
            // Create an empty chart first
            const sensorChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: 'Temperature (°C)',
                            data: [],
                            borderColor: '#dc3545',
                            backgroundColor: 'rgba(220, 53, 69, 0.1)',
                            borderWidth: 2,
                            pointRadius: 4,
                            pointBackgroundColor: '#dc3545',
                            tension: 0.4,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Humidity (%)',
                            data: [],
                            borderColor: '#007bff',
                            backgroundColor: 'rgba(13, 110, 253, 0.1)',
                            borderWidth: 2,
                            pointRadius: 4,
                            pointBackgroundColor: '#007bff',
                            tension: 0.4,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Temperature (°C)',
                                color: '#dc3545',
                                font: {
                                    weight: 'bold'
                                }
                            },
                            ticks: {
                                color: '#dddddd',
                                font: {
                                    weight: '600'
                                }
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Humidity (%)',
                                color: '#007bff',
                                font: {
                                    weight: 'bold'
                                }
                            },
                            ticks: {
                                color: '#dddddd',
                                font: {
                                    weight: '600'
                                }
                            },
                            grid: {
                                drawOnChartArea: false,
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            ticks: {
                                color: '#dddddd',
                                maxRotation: 45,
                                minRotation: 45
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#dddddd',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#007bff',
                            borderWidth: 1,
                            padding: 10,
                            displayColors: true
                        }
                    }
                }
            });
            
            // Store the chart instance on the canvas element
            document.getElementById('sensorChart').chart = sensorChart;
            
            // Fetch and update chart data
            fetchSensorData().then(data => {
                updateSensorChart(data, sensorChart);
            });
        }

        // Update chart with new data
        function updateSensorChart(sensorData, chart) {
            if (!sensorData || sensorData.length === 0) return;
            
            // Prepare data (reversed to show oldest to newest)
            const recentData = [...sensorData].reverse();
            const timestamps = recentData.map(reading => new Date(reading.timestamp).toLocaleTimeString());
            const temperatures = recentData.map(reading => reading.temperature);
            const humidities = recentData.map(reading => reading.humidity);
            
            // Update chart data
            chart.data.labels = timestamps;
            chart.data.datasets[0].data = temperatures;
            chart.data.datasets[1].data = humidities;
            chart.update();
        }

        // Sensor modal functions
        function openSensorModal() {
            document.getElementById('sensorModal').style.display = 'block';
            
            // Initialize chart when modal opens
            setTimeout(() => {
                initSensorChart();
            }, 100);
        }

        function closeSensorModal() {
            document.getElementById('sensorModal').style.display = 'none';
        }

        // Close modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('sensorModal');
            if (event.target == modal) {
                closeSensorModal();
            }
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            updateSensorDashboard();
            setInterval(function() {
                updateSensorDashboard();
            }, 20000);
            
            // Set the first tab with content as active if none is active
            const tabs = document.querySelectorAll('.alert-tab');
            let activeTabFound = false;
            
            tabs.forEach(tab => {
                if (tab.classList.contains('active')) {
                    activeTabFound = true;
                }
            });
            
            if (!activeTabFound && tabs.length > 0) {
                // Find the first tab that has content
                for (let i = 0; i < tabs.length; i++) {
                    const tabName = tabs[i].getAttribute('onclick').match(/'([^']+)'/)[1];
                    const content = document.getElementById(`${tabName}-content`);
                    
                    if (content && content.innerHTML.trim() !== '') {
                        tabs[i].classList.add('active');
                        content.classList.add('active');
                        break;
                    }
                }
            }
        });
        // Show the single dispose modal for expired products
function showSingleDisposeModal(productId, productName, maxQuantity) {
    document.getElementById('singleDisposeProductId').value = productId;
    document.getElementById('singleDisposeProductName').textContent = productName;
    document.getElementById('singleDisposeMaxQty').textContent = maxQuantity;
    
    // Set max attribute on quantity input
    const quantityInput = document.getElementById('singleDisposeQuantity');
    quantityInput.max = maxQuantity;
    quantityInput.value = maxQuantity; // Default to disposing all
    
    // Show the modal
    document.getElementById('singleDisposeModal').classList.remove('hidden');
}

// Hide the single dispose modal
function hideSingleDisposeModal() {
    document.getElementById('singleDisposeModal').classList.add('hidden');
}

// Handle form submission
document.getElementById('singleDisposeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const productId = document.getElementById('singleDisposeProductId').value;
    const quantity = document.getElementById('singleDisposeQuantity').value;
    
    try {
        const response = await fetch('/dispose-product', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId: productId,
                quantity: quantity
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('Product disposed successfully');
            hideSingleDisposeModal();
            window.location.reload(); // Refresh to update the UI
        } else {
            alert('Error: ' + result.message);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error disposing product');
    }
});
// Show manage product modal
function showManageProductModal(productId) {
    document.getElementById('manageProductId').value = productId;
    document.getElementById('manageProductModal').classList.remove('hidden');
    // Set the form action dynamically
    document.getElementById('manageProductForm').action = `/manage-product/${productId}`;
}

// Hide manage product modal
function hideManageProductModal() {
    document.getElementById('manageProductModal').classList.add('hidden');
}

// Close modal when clicking outside
document.getElementById('manageProductModal').addEventListener('click', function(e) {
    if (e.target === this) {
        hideManageProductModal();
    }
});
// Add validation to quantity input
document.getElementById('singleDisposeQuantity').addEventListener('input', function(e) {
    const max = parseInt(document.getElementById('singleDisposeMaxQty').textContent);
    const value = parseInt(e.target.value);
    
    if (value > max) {
        e.target.value = max;
        alert(`Cannot dispose more than ${max} items`);
    }
    
    if (value < 1) {
        e.target.value = 1;
        alert('Must dispose at least 1 item');
    }
});
    </script>
    </script>

    <!-- The rest of your JavaScript code goes here -->
       <!-- Add this to your HTML body, just before the closing </body> tag -->

<!-- Microphone Icon -->
<div id="mic-assistant" class="mic-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
        <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
        <line x1="12" y1="19" x2="12" y2="23"></line>
        <line x1="8" y1="23" x2="16" y2="23"></line>
    </svg>
</div>

<!-- Voice Assistant Modal -->
<div id="voice-modal" class="voice-modal hidden">
    <div class="voice-modal-content">
        <div class="voice-header">
            <h3>Voice Assistant</h3>
            <button id="close-voice-modal" class="close-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        </div>
        <div class="voice-body">
            <div class="animation-container">
                <div class="sound-wave">
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                </div>
            </div>
            <p id="listening-text">Ask about a product...</p>
            <p id="response-text" class="hidden"></p>
        </div>
        <div class="voice-footer">
            <button id="start-listening" class="mic-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
                    <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
                    <line x1="12" y1="19" x2="12" y2="23"></line>
                    <line x1="8" y1="23" x2="16" y2="23"></line>
                </svg>
            </button>
        </div>
    </div>
</div>
<!-- Add this to your existing <style> tag -->
    <style>
        /* Microphone Icon Styles */
        .mic-icon {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background-color: #3B82F6;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            z-index: 999;
            transition: all 0.3s ease;
        }
    
        .mic-icon:hover {
            transform: scale(1.1);
            background-color: #2563EB;
        }
    
        /* Voice Assistant Modal Styles */
        .voice-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
    
        .voice-modal.show {
            opacity: 1;
            visibility: visible;
        }
    
        .voice-modal-content {
            background-color: #1E293B;
            border-radius: 16px;
            width: 90%;
            max-width: 500px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            color: white;
        }
    
        .voice-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 20px;
            background-color: #0F172A;
        }
    
        .voice-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }
    
        .close-btn {
            background: none;
            border: none;
            color: #9CA3AF;
            cursor: pointer;
            padding: 4px;
            margin: -4px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }
    
        .close-btn:hover {
            color: white;
            background-color: rgba(255, 255, 255, 0.1);
        }
    
        .voice-body {
            padding: 30px 20px;
            text-align: center;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
    
        .animation-container {
            margin-bottom: 20px;
        }
    
        /* Sound Wave Animation */
        .sound-wave {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 60px;
        }
    
        .sound-wave .bar {
            display: inline-block;
            width: 5px;
            margin: 0 3px;
            height: 20px;
            background-color: #3B82F6;
            border-radius: 3px;
            animation: sound-wave-animation 1.2s infinite ease-in-out;
        }
    
        .sound-wave .bar:nth-child(2) {
            animation-delay: 0.1s;
        }
    
        .sound-wave .bar:nth-child(3) {
            animation-delay: 0.2s;
        }
    
        .sound-wave .bar:nth-child(4) {
            animation-delay: 0.3s;
        }
    
        .sound-wave .bar:nth-child(5) {
            animation-delay: 0.4s;
        }
    
        .sound-wave .bar:nth-child(6) {
            animation-delay: 0.5s;
        }
    
        .sound-wave .bar:nth-child(7) {
            animation-delay: 0.6s;
        }
    
        .sound-wave.inactive .bar {
            animation: none;
            height: 5px;
        }
    
        @keyframes sound-wave-animation {
            0%, 100% {
                height: 20px;
            }
            50% {
                height: 60px;
            }
        }
    
        #listening-text, #response-text {
            font-size: 18px;
            margin: 10px 0;
        }
    
        #response-text {
            max-height: 200px;
            overflow-y: auto;
        }
    
        .voice-footer {
            padding: 16px 20px;
            display: flex;
            justify-content: center;
            background-color: #0F172A;
        }
    
        .mic-btn {
            background-color: #3B82F6;
            color: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
    
        .mic-btn:hover {
            background-color: #2563EB;
            transform: scale(1.05);
        }
    
        .mic-btn.listening {
            background-color: #EF4444;
            animation: pulse 1.5s infinite;
        }
    
        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
            }
        }
    
    
        /* Responsive styles */
        @media screen and (max-width: 768px) {
            .mic-icon {
                bottom: 20px;
                right: 20px;
                width: 50px;
                height: 50px;
            }
    
            .voice-modal-content {
                width: 95%;
            }
        }
    </style>

<!-- Add this to the end of your JavaScript section -->
<script>
    // Voice Assistant Functionality
  document.addEventListener('DOMContentLoaded', function() {
      // Elements
      const micAssistant = document.getElementById('mic-assistant');
      const voiceModal = document.getElementById('voice-modal');
      const closeVoiceModal = document.getElementById('close-voice-modal');
      const startListeningBtn = document.getElementById('start-listening');
      const listeningText = document.getElementById('listening-text');
      const responseText = document.getElementById('response-text');
      const soundWave = document.querySelector('.sound-wave');
      
      // Product data from the page
      function getProductsData() {
          const products = [];
          const rows = document.querySelectorAll('.product-row');
          
          rows.forEach(row => {
              const cells = row.querySelectorAll('td');
              if (cells.length >= 5) {
                  products.push({
                      name: cells[0].textContent.trim().toLowerCase(),
                      quantity: cells[1].textContent.trim(),
                      location: cells[2].textContent.trim(),
                      expiryDate: cells[3].textContent.trim(),
                      daysUntilExpiry: cells[4].textContent.trim()
                  });
              }
          });
          
          return products;
      }
      
      // Find product by name
      function findProduct(productName) {
          const products = getProductsData();
          const searchName = productName.toLowerCase().trim();
          
          return products.find(product => 
              product.name.includes(searchName) || 
              searchName.includes(product.name)
          );
      }
      
      // Speech recognition setup
      let recognition;
      
      try {
          const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
          recognition = new SpeechRecognition();
          recognition.continuous = false;
          recognition.lang = 'en-US';
          recognition.interimResults = false;
          recognition.maxAlternatives = 1;
      } catch (e) {
          console.error('Speech recognition not supported:', e);
      }
      
      // Speech synthesis
      const speak = (text) => {
          const utterance = new SpeechSynthesisUtterance(text);
          utterance.rate = 1;
          utterance.pitch = 1;
          speechSynthesis.speak(utterance);
      };
      
      // Handle recognition results
      if (recognition) {
          recognition.onresult = (event) => {
              const transcript = event.results[0][0].transcript.toLowerCase();
              listeningText.textContent = transcript;
              
              setTimeout(() => {
                  processCommand(transcript);
              }, 500);
          };
          
          recognition.onend = () => {
              startListeningBtn.classList.remove('listening');
              soundWave.classList.add('inactive');
          };
          
          recognition.onerror = (event) => {
              console.error('Speech recognition error', event.error);
              listeningText.textContent = `Error: ${event.error}. Please try again.`;
              startListeningBtn.classList.remove('listening');
              soundWave.classList.add('inactive');
          };
      }
      
      // Process voice command
      function processCommand(command) {
          responseText.classList.remove('hidden');
          
          // Extract product name using a more sophisticated approach
          function extractProductName(cmd) {
              // Common phrases that might come before product names
              const phrases = [
                  'tell about', 'tell me about', 'what about', 'details for', 
                  'information on', 'when will', 'when does', 'expires', 
                  'expiration date for', 'expiry date of', 'how many', 
                  'quantity of', 'quantities of', 'amount of', 'where is',
                  'location of', 'where can i find'
              ];
              
              let productName = cmd;
              
              // Remove question words and common phrases
              phrases.forEach(phrase => {
                  productName = productName.replace(phrase, '');
              });
              
              // Remove other common words that might appear
              const fillerWords = ['the', 'a', 'an', 'this', 'that', 'these', 'those', 'some', 'expire', 'product'];
              fillerWords.forEach(word => {
                  productName = productName.replace(new RegExp(`\\b${word}\\b`, 'gi'), '');
              });
              
              return productName.trim();
          }
          
          // Check for specific expiration date questions
          if (command.includes('when') && 
             (command.includes('expire') || command.includes('expiry') || command.includes('expiration'))) {
              
              const productName = extractProductName(command);
              const product = findProduct(productName);
              
              if (product) {
                  const response = `${product.name} expires on ${product.expiryDate}, which is ${product.daysUntilExpiry} days from now.`;
                  responseText.textContent = response;
                  speak(response);
              } else {
                  const response = `Sorry, I couldn't find any product matching "${productName}" in the inventory.`;
                  responseText.textContent = response;
                  speak(response);
              }
          }
          // Check for quantity questions
          else if ((command.includes('how many') || command.includes('quantity') || 
                   command.includes('quantities') || command.includes('amount')) &&
                   !command.includes('expiring soon')) {
              
              const productName = extractProductName(command);
              const product = findProduct(productName);
              
              if (product) {
                  const response = `There are ${product.quantity} units of ${product.name} in your inventory.`;
                  responseText.textContent = response;
                  speak(response);
              } else {
                  const response = `Sorry, I couldn't find any product matching "${productName}" in the inventory.`;
                  responseText.textContent = response;
                  speak(response);
              }
          }
          // Check for location questions
          else if (command.includes('where') || command.includes('location')) {
              
              const productName = extractProductName(command);
              const product = findProduct(productName);
              
              if (product) {
                  const response = `${product.name} is located at ${product.location}.`;
                  responseText.textContent = response;
                  speak(response);
              } else {
                  const response = `Sorry, I couldn't find any product matching "${productName}" in the inventory.`;
                  responseText.textContent = response;
                  speak(response);
              }
          }
          // General product info (existing functionality)
          else if (command.includes('tell about') || 
                  command.includes('tell me about') || 
                  command.includes('what about') || 
                  command.includes('details for') || 
                  command.includes('information on')) {
              
              const productName = extractProductName(command);
              const product = findProduct(productName);
              
              if (product) {
                  const response = `${product.name} has a quantity of ${product.quantity}. It expires on ${product.expiryDate}, which is ${product.daysUntilExpiry} days from now. It's located at ${product.location}.`;
                  responseText.textContent = response;
                  speak(response);
              } else {
                  const response = `Sorry, I couldn't find any product matching "${productName}" in the inventory.`;
                  responseText.textContent = response;
                  speak(response);
              }
          } else if (command.includes('search for') || command.includes('find')) {
              // Handle search commands
              let searchTerm = command
                  .replace('search for', '')
                  .replace('find', '')
                  .trim();
              
              // Trigger the search input
              const searchInput = document.getElementById('searchInput');
              if (searchInput) {
                  searchInput.value = searchTerm;
                  searchInput.dispatchEvent(new Event('input'));
                  
                  const response = `Searching for "${searchTerm}" in inventory.`;
                  responseText.textContent = response;
                  speak(response);
              }
          } else if (command.includes('expiring soon') || command.includes('expires soon')) {
              // Find products expiring soon
              const products = getProductsData();
              const expiringProducts = products.filter(p => {
                  const days = parseInt(p.daysUntilExpiry);
                  return !isNaN(days) && days <= 7;
              });
              
              if (expiringProducts.length > 0) {
                  const response = `I found ${expiringProducts.length} products expiring within 7 days: ${expiringProducts.map(p => p.name).join(', ')}`;
                  responseText.textContent = response;
                  speak(response);
              } else {
                  const response = "I didn't find any products expiring within the next 7 days.";
                  responseText.textContent = response;
                  speak(response);
              }
          } else {
              const response = "I'm sorry, I didn't understand that command. You can ask about product details, expiration dates, quantities, locations, search for items, or check which products are expiring soon.";
              responseText.textContent = response;
              speak(response);
          }
          
          listeningText.classList.add('hidden');
      }
      
      // Function to start listening
      function startListening() {
          if (recognition) {
              try {
                  responseText.classList.add('hidden');
                  listeningText.classList.remove('hidden');
                  listeningText.textContent = 'Listening...';
                  soundWave.classList.remove('inactive');
                  startListeningBtn.classList.add('listening');
                  
                  recognition.start();
              } catch (e) {
                  console.error('Error starting recognition:', e);
              }
          } else {
              responseText.classList.remove('hidden');
              responseText.textContent = "Sorry, speech recognition is not supported in your browser.";
              listeningText.classList.add('hidden');
          }
      }
      
      // Event listeners
      micAssistant.addEventListener('click', () => {
          voiceModal.classList.remove('hidden');
          setTimeout(() => {
              voiceModal.classList.add('show');
              // Automatically start listening when modal opens
              startListening();
          }, 10);
          // This element doesn't exist in your HTML
  document.getElementById('sensorDashboardLink').addEventListener('click', function(e) {
      e.preventDefault();
      openSensorModal();
  });
          
          responseText.classList.add('hidden');
          listeningText.classList.remove('hidden');
          listeningText.textContent = 'Ask about a product...';
          soundWave.classList.add('inactive');
      });
      
      closeVoiceModal.addEventListener('click', () => {
          voiceModal.classList.remove('show');
          setTimeout(() => {
              voiceModal.classList.add('hidden');
              speechSynthesis.cancel(); // Stop any ongoing speech
          }, 300);
      });
      
      // Keep this button for manual activation if needed
      startListeningBtn.addEventListener('click', startListening);
      
      // Close modal when clicking outside
      voiceModal.addEventListener('click', function(e) {
          if (e.target === voiceModal) {
              closeVoiceModal.click();
          }
      });
  });
  </script>

</body>
</html>